@page "/editQuestion/{TopicID}/{questionID}"
@page "/editQuestion/add/{TopicID}"
@inject NavigationManager Navigation
@using Mkt3.Data
@using Mkt3.Components

@inject QuestionService QuestionService;

<PageTitle>Question Editor</PageTitle>

<h1>Edit or Add Questions</h1>

<p>This page will allow you to edit a question</p>


@if (_question == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
     
    <div class="form-field">
        <div class="form-field-label" for="lastNameInput">Type: </div>
        <div class="form-field-control">
            <select value="@selectedType" @onchange="QuestionTypeChange">
         	    @foreach (var id in types)
         		{
         			<option value="@id">@id</option>
         		}
            </select>
        </div>
    </div>

    @if (_showTF)
    {
        <TrueFalseComponent question=_question TopicID="@TopicID" onResetClick="Reset" onSaveClick="Save"/>
    }
    @if (_showSA)
    {
        <ShortAnswerComponent question=_question TopicID="@TopicID" onResetClick="Reset" onSaveClick="Save"/>
    }
    
}
@code {

    [Parameter]
    public string questionID { get; set; }
    
    [Parameter]
    public string TopicID { get; set; }
    


    private Question? _question;
    private bool _showTF = false;
    private bool _showSA = false;
    private Question? previousState;
    string[] types = new string[] { "True/False", "Short Answer", "Long Answer" };
    private string selectedType;
    
    
    protected override async Task OnInitializedAsync()
    {
        if (questionID != null)
        {
            _question = await QuestionService.GetQuestionAsync(questionID);
            previousState = (Question)_question.Clone();
            selectedType = _question.type;

        }
        else
        {
            selectedType = "Short Answer";
            _question = new Question();
        }
        showBlock(selectedType);
    }

    private void QuestionTypeChange(ChangeEventArgs obj)
    {
        var selected = obj.Value.ToString();
        showBlock(selected);
    }
    
    private void showBlock(string type) 
    {

        _showTF = false;
        _showSA = false;
        if (type == "True/False")
        {
            _showTF = true;
        }
        else if (type == "Short Answer")
        {
            _showSA = true;
        }
        selectedType = type;



    }
    
    private async void Reset()
    {
        if (previousState != null)
        {
            _question = (Question)previousState.Clone();
        }
     //   await QuestionService.Update(_question);
        showBlock(_question.type);
        StateHasChanged();
        Navigation.NavigateTo("/QuestionList/"+TopicID);
       
    }

    private async void Save()
    {
        Navigation.NavigateTo("/QuestionList/"+TopicID);
    }
    


}