@page "/editQuestion/{TopicID}/{questionID}"
@page "/editQuestion/add/{TopicID}"
@inject NavigationManager Navigation
@using Mkt3.Data
@using Mkt3.Components
@using Microsoft.AspNetCore.Identity 
@using Mono.TextTemplating
@inject TopicService TopicService;
@inject QuestionService QuestionService;

<PageTitle>Question Editor</PageTitle>





@if (_question == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!TopicService.GetTopics(userID).Result.Select(t => t.ID).Contains(Convert.ToInt32(TopicID)))
{
    <h2>You do not have permission to add questions to this section</h2>
}
else
{
    <p>Select a question type and enter values.  Click save when done.  </p>   
    <div class="form-field">
        <div class="form-field-label" for="lastNameInput">Type: </div>
        <div class="form-field-control">
            <RadzenDropDown AllowClear="false" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
                            @bind-Value="selectedType" AllowFiltering="false" Class="w-100" Data=@types Change=@(args => QuestionTypeChange(args.ToString())) />
        </div>
    </div>

    @if (_showTF)
    {
        <TrueFalseComponent question=_question TopicID="@TopicID" onResetClick="Reset" onSaveClick="Save"/>
    }
    @if (_showSA)
    {
        <ShortAnswerComponent question=_question TopicID="@TopicID" onResetClick="Reset" onSaveClick="Save"/>
    }
    @if (_showLA)
    {
        <LongAnswerComponent question=_question TopicID="@TopicID" onResetClick="Reset" onSaveClick="Save"/>
    }
    @if (_showMC)
    {
        <MultipleChoiceComponent question=_question TopicID="@TopicID" onResetClick="Reset" onSaveClick="Save"/>
    }
    
}
@code {

    [Parameter]
    public string questionID { get; set; }
    
    [Parameter]
    public string TopicID { get; set; }
    [CascadingParameter]
    private string userID { get; set; }



    private Question? _question;
    private bool _showTF = false;
    private bool _showSA = false;
    private bool _showLA = false;
    private bool _showMC = false;
    private Question? previousState;
    string[] types = new string[] { "True/False", "Short Answer", "Long Answer", "Multiple Choice" };
    private string selectedType;
    
    
    protected override async Task OnInitializedAsync()
    {
       
        if (questionID != null)
        {
            _question = await QuestionService.GetQuestionAsync(questionID, userID);
            if (_question == null)
            {
                questionID = null;
                selectedType = "Short Answer";
                _question = new Question(userID);
            }
            else
            {
                previousState = (Question)_question.Clone();
                selectedType = _question.type;
            }

        }
        else
        {
            selectedType = "Short Answer";
            _question = new Question(userID);
        }
        showBlock(selectedType);
    }

    private Task QuestionTypeChange(string obj)
    {
        var selected = obj;
        showBlock(selected);
        return Task.CompletedTask;
    }
    
    private void showBlock(string type) 
    {

        _showTF = false;
        _showSA = false;
        _showLA = false;
        _showMC = false;
        if (type == "True/False")
        {
            _showTF = true;
        }
        else if (type == "Short Answer")
        {
            _showSA = true;
        }
        else if (type == "Long Answer")
        {
            _showLA = true;
        }
        else if (type == "Multiple Choice")
        {
            _showMC = true;
        }
        selectedType = type;

        StateHasChanged();

    }
    
    private async void Reset()
    {
        if (previousState != null)
        {
            _question = (Question)previousState.Clone();
        }
     //   await QuestionService.Update(_question);
        showBlock(_question.type);
        StateHasChanged();
        Navigation.NavigateTo("/QuestionList/"+TopicID);
       
    }

    private async void Save()
    {
        Navigation.NavigateTo("/QuestionList/"+TopicID);
    }
    


}