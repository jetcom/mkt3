@using Mkt3.Data
@using Mono.TextTemplating
@using Blazorise.Extensions
@using System.Diagnostics

@inject QuestionService QuestionService;

@if (question == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <EditForm Model="@question" OnValidSubmit="@HandleValidSubmit">
        <div class="form-fields">
        
            <QuestionPrompt question="question"/>
           
            @{ solIndex = 0; }
            @foreach (var sol in _solutions)
            {
                <div class="form-field">
                    
                    <div class="form-field-label" for="lastNameInput">
                        @if (solIndex == 0  && _solutions.Count == 1)
                        {
                            <span>Solution:</span>
                        }
                        else if (solIndex == 0  && _solutions.Count > 1)
                        {
                            <span>Solutions: </span>
                        }
                    </div>
                    @{ var index = solIndex;}
                    <div class="form-field-control">
                        <RadzenTextBox @bind-Value="@_solutions[index].value" Class="w-100"/>
                    </div>
                    <div class="form-field-control" style="vertical-align: middle; padding-left:  0px;">
                    @if (_solutions.Count - 1 == solIndex)
                    {
                    
                        <img style="width:24px" src="images/plus.png" onclick="@addSolution"/>
                        if (_solutions.Count > 1)
                        {
                            <img style="width:24px; margin-left: 5px;" src="images/minus.png" onclick="@deleteSolution"/>
                        }
                    }
                    </div>
                </div>
                solIndex++;
            }
            
            <PointsAndGroups question=question TopicID="@TopicID" />
            <div class="form-field">
                <div class="form-field-label" for="lastNameInput"> </div>
                <div class="form-field-control">
                    <button type="submit" class="buttons">Save</button>
                    <button type="button" class="buttons" @onclick="@(async () => ResetForm())">Cancel</button>
                </div>
            </div>
        </div>
    </EditForm>

   
    
}

@code {
    [Parameter]
    public Question? question { get; set; }
    
    [Parameter]
    public EventCallback onResetClick { get; set; }
    [Parameter]
    public EventCallback onSaveClick { get; set; }
    [Parameter]
    public string TopicID { get; set; }
    
    private int solIndex { get; set; }

    private class Solution
    {
        public string value { get; set; }
    }

    private List<Solution> _solutions;
    
    protected override async Task OnInitializedAsync()
    {
        _solutions = new List<Solution>();
        Debug.Write("Short Answer");
        foreach (var s in question.Solutions)
        {
            _solutions.Add(new Solution() { value = s});
        }
    }
    private async Task HandleValidSubmit()
    {
        question.type = "Short Answer";
        question.Solutions.Clear();
        foreach (var s in _solutions)
        {
            question.Solutions.Add(s.value);
        }
        if (await QuestionService.Update(question, Convert.ToInt32(TopicID)))
        {
            await onSaveClick.InvokeAsync();
        }
    }

    public void addSolution()
    {
        //question.Solutions.Add("");
        _solutions.Add(new Solution());
        StateHasChanged();
    }
    public void deleteSolution()
    {
        _solutions.RemoveAt(_solutions.Count-1);
       // question.Solutions.RemoveAt(question.Solutions.Count-1);
        StateHasChanged();
    }
    
    private async void ResetForm()
    {
        await onResetClick.InvokeAsync();
        
    }
}