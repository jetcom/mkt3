@using Mkt3.Data
@using Mono.TextTemplating
@using Blazorise.Extensions

@inject QuestionService QuestionService;

@if (question == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <EditForm Model="@question" OnValidSubmit="@HandleValidSubmit">
        <div class="form-fields">
        
            <div class="form-field">
                <div class="form-field-label" for="lastNameInput">QuestionID: </div>
                <div class="form-field-control"><input cols="50" @bind="@question.QuestionLabel"/></div>
            </div>
            <div class="form-field">
                <div class="form-field-label" for="lastNameInput">Prompt: </div>
                <div class="form-field-control"><textarea rows="4" cols="50" @bind="@question.Prompt"/></div>
            </div>
           
            @{ solIndex = 0; }
            @foreach (var sol in question.Solutions)
            {
                <div class="form-field">
                    
                    <div class="form-field-label" for="lastNameInput">
                        @if (solIndex == 0  && question.Solutions.Count == 1)
                        {
                            <span>Solution:</span>
                        }
                        else if (solIndex == 0  && question.Solutions.Count > 1)
                        {
                            <span>Solutions: </span>
                        }
                    </div>
                    @{ var index = solIndex;}
                    <div class="form-field-control"><input size="50" @bind="@question.Solutions[index]"/></div>
                    @if (question.Solutions.Count - 1 == solIndex)
                    {
                    
                        <img style="width:24px" src="images/plus.png" onclick="@addSolution"/>
                        if (question.Solutions.Count > 1)
                        {
                            <img style="width:24px; margin-left: 5px;" src="images/minus.png" onclick="@deleteSolution"/>
                        }
                    }
                </div>
                solIndex++;
            }
         
            <div class="form-field">
                <div class="form-field-label" for="lastNameInput">Points: </div>
                @{
                    question.GroupID ??= 0;
                }
                <div class="form-field-control"><input disabled="@pointsDisabled" type="number" size="5" @bind="@question.Points"/>
                    or Group: 
                    <select value="@selectedGroup" @onchange="GroupChange">
                        @{
                            var groups = QuestionService.GetAllGroups(TopicID);
                            <option value="0"><b>No Group</b></option>
                            foreach (var group in groups)
                            {
                                <option value="@group.ID">@group.Name (@group.Points) </option>
                            }
                            <option value="New">New Group...</option>
                        }
                        
                    </select>
                    <img hidden="@(!pointsDisabled)" onclick="@ShowModal" width="24px" src="images/pencil.png"/>
                </div>
            </div>
            <!--   <div class="form-field">
                <div class="form-field-label" for="lastNameInput">Line Length: </div>
                <div class="form-field-control">
                    <input type="checkbox" @bind="@question.customLineLength" />
                    <input @bind="@question.LineLength"/>
                </div>
            </div>-->
            <div class="form-field">
                <div class="form-field-label" for="lastNameInput"> </div>
                <div class="form-field-control">
                    <button type="submit" class="buttons">Save</button>
                    <button type="button" class="buttons" @onclick="@(async () => ResetForm())">Cancel</button>
                </div>
            </div>
        </div>
    </EditForm>
  
    <Modal @ref="modalRef">
        <ModalContent Centered>
            <ModalHeader class="modal-blue" >
                <ModalTitle>Edit Group</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody class="bg-dark">
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit Placeholder="Enter name..." @bind-Text="@currentGroupName" />
                </Field>
                <Field>
                    <FieldLabel>Points</FieldLabel>
                    <TextEdit MaskType="MaskType.Numeric" Placeholder="Points" @bind-Text="@currentGroupPoints" />
                </Field>
            </ModalBody>
            <ModalFooter class="bg-dark">
                @{
                    if (selectedGroup != "New")
                    {
                        <Button Color="Color.Danger" Clicked="@DeleteGroup">Delete</Button>
                    }
                }
                <Button Color="Color.Primary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="@SaveGroupChanges">Save</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

}

@code {
    [Parameter]
    public Question? question { get; set; }
    
    [Parameter]
    public EventCallback onResetClick { get; set; }
    [Parameter]
    public EventCallback onSaveClick { get; set; }
    [Parameter]
    public string TopicID { get; set; }
    
    private int solIndex { get; set; }
    
    private string selectedGroup { get; set; }
    private string oldSelectedGroup { get; set; }
    private string currentGroupName { get; set; }
    private string currentGroupPoints { get; set; }
    
    private bool pointsDisabled{ get; set; }
    private Modal modalRef;

    private Task HideModal()
    {
        if (selectedGroup == "New")
        {
            selectedGroup = oldSelectedGroup;
        }
        return modalRef.Hide(); 
    }
    
    private Task ShowModal()
    {
        if (selectedGroup != "New")
        {
            var currentGroup = QuestionService.GetGroup(Convert.ToInt32(selectedGroup));
            currentGroupName = currentGroup.Name;
            currentGroupPoints = currentGroup.Points.ToString();
        }
      
        return modalRef.Show();
    }

    private async Task<Task> DeleteGroup()
    {
        var currentGroup = QuestionService.GetGroup(Convert.ToInt32(selectedGroup));
        QuestionService.DeleteGroup(currentGroup);
        selectedGroup = "0";
        return modalRef.Hide();
        
    }

    private async Task<Task> SaveGroupChanges()
    {
        var currentGroup = new Group();
        if (selectedGroup != "New")
        {
            currentGroup = QuestionService.GetGroup(Convert.ToInt32(selectedGroup));
        }
        
        currentGroup.Name = currentGroupName;
        currentGroup.Points = Convert.ToInt32(currentGroupPoints);
        currentGroup.TopicID = Convert.ToInt32(TopicID);
        selectedGroup = (await QuestionService.UpdateGroup(currentGroup)).ToString();
   
        return modalRef.Hide();
    }


    protected override async Task OnInitializedAsync()
    {
        setGroup(question.GroupID.ToString());
        if (selectedGroup != null && selectedGroup != "0")
        {
            var currentGroup = QuestionService.GetGroup(Convert.ToInt32(selectedGroup));
            currentGroupName = currentGroup.Name;
            currentGroupPoints = currentGroup.Points.ToString();
        }

    //    _question = question as ShortAnswerQuestion;
    }
    
    
    private void GroupChange(ChangeEventArgs obj)
    {
        oldSelectedGroup = selectedGroup;
        var selected = obj.Value.ToString();
        setGroup(selected);
 
    }
    
    
    private void setGroup(string? selected)
    {
        if (selected.IsNullOrEmpty() || selected == "0")
        {
            question.GroupID = 0;
            pointsDisabled = false;
        }
        else if (selected == "New")
        {
            selectedGroup = selected;
            currentGroupName = "";
            currentGroupPoints = "";
            ShowModal();
        }
        else
        {
            var group = QuestionService.GetGroup(Convert.ToInt32(selected));
            if (group == null)
            {
                selected = "0";
            }
            selectedGroup = selected;
            question.GroupID = Convert.ToInt32(selected);
            
            pointsDisabled = true;

        }
        StateHasChanged(); 
    }
    
    private async Task HandleValidSubmit()
    {
        question.type = "Short Answer";
        if (await QuestionService.Update(question, Convert.ToInt32(TopicID)))
        {
            await onSaveClick.InvokeAsync();
        }
    }

    public void addSolution()
    {
        question.Solutions.Add("");
        StateHasChanged();
    }
    public void deleteSolution()
    {
        question.Solutions.RemoveAt(question.Solutions.Count-1);
        StateHasChanged();
    }
    
    private async void ResetForm()
    {
        await onResetClick.InvokeAsync();
        
    }
}