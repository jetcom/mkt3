@using Mkt3.Data
@inject QuestionService QuestionService;
@if (question == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <EditForm Model="@question" OnValidSubmit="@HandleValidSubmit">
        <div class="form-fields">
        
        <div class="form-field">
            <div class="form-field-label" for="lastNameInput">Prompt: </div>
            <div class="form-field-control"><textarea rows="4" cols="50" @bind="@question.Prompt"/></div>
        </div>
        <div class="form-field">
            <div class="form-field-label" for="lastNameInput">Solution: </div>
            <div class="form-field-control"><input size="50" @bind="@question.Solution"/></div>
        </div>
        <div class="form-field">
            <div class="form-field-label" for="lastNameInput">Points: </div>
            <div class="form-field-control"><input @bind="@question.Points"/></div>
        </div>

         <button type="submit">Save</button><button type="submit" @onclick="@(async () => ResetForm())">Cancel</button>
         </div>
    </EditForm>
}

@code {
    [Parameter]
    public Question question { get; set; }
    [Parameter]
    public string belongsTo { get; set; }



    protected override async Task OnInitializedAsync()
    {
    //    _question = question as ShortAnswerQuestion;

    }
    
    private async Task HandleValidSubmit()
    {
       
        if (await QuestionService.SaveShortAnswerQuestion(question))
        {
           // NavManager.NavigateTo(_pageState.GetGoBackPage());

        }
    }
    private void ResetForm()
    {
       /* repeater = previousState;
        NavManager.NavigateTo(_pageState.GetGoBackPage());*/
        
    }
}