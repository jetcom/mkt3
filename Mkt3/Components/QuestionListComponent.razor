@using Mkt3.Data
@using Mkt3.Shared
@inject QuestionService QuestionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject CurrentNav currentNav

<h3 hidden="@editTitle">@topic.Name <img onclick="@doEdit" width="24px" src="images/pencil.png"/></h3>
<input class="titleEdit" hidden="@(!editTitle)" id="nameEditBox"  type="text" width="30" value="@topic.Name" @onchange="@TopicChange"/>

 <RadzenDataGrid AllowFiltering="true" AllowColumnResize="false" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                 Data="@questions" TItem="Question" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                 RowSelect="Callback" SelectionMode="DataGridSelectionMode.Single">
 <Columns>
     <RadzenDataGridColumn TItem="Question" Property="Prompt" Filterable="true" Title="Prompt" Sortable="true"  Width="400px" TextAlign="TextAlign.Left" />
     <RadzenDataGridColumn TItem="Question" Property="type"  Title="Type" Sortable="true" Filterable="true" Width="100px" TextAlign="TextAlign.Center" />
         
     <RadzenDataGridColumn TItem="Question" Property="Group" Title="Group" Sortable="true" Filterable="true"  Width="100px" />
     <RadzenDataGridColumn TItem="Question" Width="80px" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" >
         <Template Context="data">
             <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Darker" Icon="delete" Class="m-1" Click=@(() => Delete(data)) Text="Delete"/>
         </Template>
     </RadzenDataGridColumn>
 </Columns>
 </RadzenDataGrid>

<br/>
<a href="/editQuestion/add/@TopicID" class="buttons">Add</a>    
@code {

    [Parameter] 
    public string TopicID { get; set; }
    
    [Parameter] 
    public string CourseID { get; set; }
    
    [Parameter]
    public EventCallback onDeleteCallBack { get; set; }
    
    [Parameter]
    public EventCallback onTopicChangedCallBack { get; set; }
    
    private List<Question> questions { get; set; }

    private Question currentQuestion { get; set; }
    
    private Topic topic;
    private bool editTitle { get; set; }

    
    protected override async Task OnInitializedAsync()
    {
        editTitle = false;   
        Refresh();
    }

    //THIS WILL UPDATE MODEL IF PARENT CHANGES
    protected override async Task OnParametersSetAsync()
    {
        Refresh();
    }

    private async void Refresh()
    {
        topic = await QuestionService.GetTopicsByID(Convert.ToInt32(TopicID));
        questions = await QuestionService.GetQuestionsByTopic(Convert.ToInt32(TopicID));
        StateHasChanged();
    }

    private void doEdit(EventArgs args)
    {
        editTitle = true;
    }
    
    private async void TopicChange(ChangeEventArgs args)
    {
        topic.Name = args.Value.ToString();
        editTitle = false;
        await QuestionService.UpdateTopic(topic);
        currentNav.SetTopics();
        StateHasChanged();
        Refresh();

        
    }
    


    private void Add()
    {
       
    }
    
   
    private async Task Delete(Question question)
    {


        if (!await JSRuntime.InvokeAsync<bool>("confirm","Are you sure you want to delete: " + question.QuestionLabel + "?")) return;
        var result = (QuestionService.Delete(question));
        StateHasChanged();
        Refresh();

    }


    private void Callback(Question q)
    {
        NavigationManager.NavigateTo("editQuestion/"+TopicID+"/"+q.ID);
    }

}