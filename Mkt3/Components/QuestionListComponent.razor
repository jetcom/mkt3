@using Mkt3.Data
@using Mkt3.Shared
@inject QuestionService QuestionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject CurrentNav currentNav

<h3 hidden="@editTitle">@topic.Name <img onclick="@doEdit" width="24px" src="images/pencil.png"/></h3>
<input class="titleEdit" hidden="@(!editTitle)" id="nameEditBox"  type="text" width="30" value="@topic.Name" @onchange="@TopicChange"/>


<table class="table table-dark table-striped">
     <TableHeader>
    <TableRow>
        <AuthorizeView>
            <Authorized>
                <th></th>
            </Authorized>
        </AuthorizeView>
        <TableHeaderCell>
            <span @onclick="@(async () => await sortAsync("Title"))"><img width="12" src="@imageSortName"/>Question
            </span> </TableHeaderCell>
        <TableHeaderCell style="width: 150px">
            <span @onclick="@(async () => await sortAsync("Type"))"><img width="12" src="@imageSortName"/>Type
            </span> </TableHeaderCell>
         <TableHeaderCell style="width: 150px">
                <span @onclick="@(async () => await sortAsync("Group"))"><img width="12" src="@imageSortName"/>Group
                </span> </TableHeaderCell>
        <TableHeaderCell style="width:10px;">
            
           
                
            </TableHeaderCell>

    </TableRow>
    </TableHeader>
    <TableBody>
    @foreach (var question in questions)
    {
        <TableRow>
            <AuthorizeView>
                <Authorized>
                   <!-- <td><a href="/editRepeater/@question.QuestionLabel"> <img width="12" src="@imageEditName"/></a></td>-->
                </Authorized>
            </AuthorizeView>
       
            <TableRowCell><a href="/editQuestion/@TopicID/@question.ID">@question.Prompt</a>
                @{/*
                  foreach (var tag in question.ExamTags)
                  {
                      <button class="tag">@tag</button>
                      <button class="tag-remove">X</button>
                  }
               */
                }
            </TableRowCell>
      
            <TableRowCell>@question.type</TableRowCell>
              <TableRowCell>
                  @{
                      
                    if (question.GroupID != null && question.GroupID != 0)
                    {
                            var group = QuestionService.GetGroup(question.GroupID);

                        if (group != null)
                        {
                            <span>@group.Name</span>
                        }
                    }
                }</TableRowCell>
            
            <TableRowCell><button type="button" class="buttons buttons-red" @onclick="@(async () => await Delete(question))">Delete</button>   </TableRowCell>


        </TableRow>
    }
    </TableBody>
</table>

<a href="/editQuestion/add/@TopicID" class="buttons">Add</a>    
@code {

    [Parameter] 
    public string TopicID { get; set; }
    
    [Parameter] 
    public string CourseID { get; set; }
    
    [Parameter]
    public EventCallback onDeleteCallBack { get; set; }
    
    [Parameter]
    public EventCallback onTopicChangedCallBack { get; set; }
    
    private List<Question> questions { get; set; }
    private string currentSort =  "RFreq";
    private string currentOrder = "asc";
    private string imageSortName = "images/sort-asc-white.png";
    private string imageEditName = "images/edit-white.png";
    private Topic topic;
    private bool editTitle { get; set; }

    
    protected override async Task OnInitializedAsync()
    {
        editTitle = false;   
        Refresh();
    }

    //THIS WILL UPDATE MODEL IF PARENT CHANGES
    protected override async Task OnParametersSetAsync()
    {
        Refresh();
    }

    private async void Refresh()
    {
        topic = await QuestionService.GetTopicsByID(Convert.ToInt32(TopicID));
        questions = await QuestionService.GetQuestionsByTopic(Convert.ToInt32(TopicID));
        StateHasChanged();
    }

    private void doEdit(EventArgs args)
    {
        editTitle = true;
    }
    
    private async void TopicChange(ChangeEventArgs args)
    {
        topic.Name = args.Value.ToString();
        editTitle = false;
        await QuestionService.UpdateTopic(topic);
        currentNav.SetTopics();
        StateHasChanged();
        Refresh();

        
    }
    
    private Task sortAsync(string sortData)
    {
        
        if (currentSort == sortData)
        {
            currentOrder = currentOrder == "asc" ? "desc" : "asc";
            imageSortName = "images/sort-" + currentOrder + "-white.png";
        }
        currentSort = sortData;
        
        //questions = questions.AsQueryable().OrderBy(sortData + " "+ currentOrder).ToArray();
        return Task.FromResult(true);
    }

    private void Add()
    {
       
    }
    
   
    private async Task Delete(Question question)
    {


        if (!await JSRuntime.InvokeAsync<bool>("confirm","Are you sure you want to delete: " + question.QuestionLabel + "?")) return;
        var result = (QuestionService.Delete(question));
        StateHasChanged();
        Refresh();

    }
    
 

}