@using Mkt3.Data
@using Mono.TextTemplating
@using Blazorise.Extensions
@using System.Diagnostics
@using TabPosition = Radzen.TabPosition

@inject QuestionService QuestionService;

@if (question == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <EditForm Model="@question" OnValidSubmit="@HandleValidSubmit">
        <div class="form-fields">
        
            <QuestionPrompt question="question"/>
            <div class="form-field">
                <div class="form-field-label" for="lastNameInput"> </div>
                <div class="form-field-control">
      <RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client" >
          <Tabs>
              <RadzenTabsItem Text="Orders">
                  <SubPartComponent/>

              </RadzenTabsItem>
                           
                        </Tabs>
                    </RadzenTabs>
                </div>
            </div>
            
          
            <div class="form-field">
                <div class="form-field-label" for="lastNameInput"> </div>
                <div class="form-field-control">
                    <button type="submit" class="buttons">Save</button>
                    <button type="button" class="buttons" @onclick="@(async () => ResetForm())">Cancel</button>
                </div>
            </div>
        </div>
    </EditForm>

   
    
}

@code {
    [Parameter]
    public Question? question { get; set; }
    
    [Parameter]
    public EventCallback onResetClick { get; set; }
    [Parameter]
    public EventCallback onSaveClick { get; set; }
    [Parameter]
    public string TopicID { get; set; }
    
    private int solIndex { get; set; }
    
    private int wrongIndex { get; set; }

    private class Answer
    {
        public string value { get; set; }
    }

    private List<Answer> _solutions;
    private List<Answer> _wrongAnswers;
    
    protected override async Task OnInitializedAsync()
    {
        _solutions = new List<Answer>();
        _wrongAnswers = new List<Answer>();
        Debug.Write("Short Answer");
        foreach (var s in question.Solutions)
        {
            _solutions.Add(new Answer() { value = s});
        }
        foreach (var wa in question.WrongAnswers)
        {
            _wrongAnswers.Add(new Answer() { value = wa});
        }
    }
    private async Task HandleValidSubmit()
    {
        question.type = "Multiple Choice";
        question.Solutions.Clear();
        question.WrongAnswers.Clear();
        foreach (var s in _solutions)
        {
            question.Solutions.Add(s.value);
        }
        
        foreach (var wa in _wrongAnswers)
        {
            question.WrongAnswers.Add(wa.value);
        }
        if (await QuestionService.UpdateQuestion(question, Convert.ToInt32(TopicID)))
        {
            await onSaveClick.InvokeAsync();
        }
    }

    public void addWrongAnswer()
    {
    //question.Solutions.Add("");
        _wrongAnswers.Add(new Answer());
        StateHasChanged();
    }
    public void deleteWrongAnswer(int index)
    {
        _wrongAnswers.RemoveAt(index);
    // question.Solutions.RemoveAt(question.Solutions.Count-1);
        StateHasChanged();
    }
    
    public void addSolution()
    {
        //question.Solutions.Add("");
        _solutions.Add(new Answer());
        StateHasChanged();
    }
    public void deleteSolution(int index)
    {
        _solutions.RemoveAt(index);
       // question.Solutions.RemoveAt(question.Solutions.Count-1);
        StateHasChanged();
    }
    
    private async void ResetForm()
    {
        await onResetClick.InvokeAsync();
        
    }
}