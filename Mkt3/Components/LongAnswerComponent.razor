@using Mkt3.Data
@using Mono.TextTemplating
@using Blazorise.Extensions
@using System.Diagnostics

@inject QuestionService QuestionService;

@if (question == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <EditForm Model="@question" OnValidSubmit="@HandleValidSubmit">
        <div class="form-fields">
        
          <QuestionPrompt question="question"></QuestionPrompt>
            <div class="form-field">
                  <div class="form-field-label" for="lastNameInput">Solution: </div>
                <div class="form-field-control">
         
                    <RadzenHtmlEditor  @bind-Value=@solution style="height: 300px; width: 600px;" UploadUrl="upload/image" >
                   <RadzenHtmlEditorUndo />
                   <RadzenHtmlEditorRedo />
                   <RadzenHtmlEditorSeparator />
                   <RadzenHtmlEditorBold />
                   <RadzenHtmlEditorItalic />
                   <RadzenHtmlEditorUnderline />
                   <RadzenHtmlEditorSeparator />
                   <RadzenHtmlEditorOrderedList/>
                   <RadzenHtmlEditorUnorderedList/>
                   <RadzenHtmlEditorAlignLeft/>
                   <RadzenHtmlEditorAlignCenter/>
                   <RadzenHtmlEditorAlignRight/>
               </RadzenHtmlEditor>
          
              
                    
                </div>
                </div>
           
           
            
            <PointsAndGroups question=question TopicID="@TopicID" />
            <div class="form-field">
                <div class="form-field-label" for="lastNameInput"> </div>
                <div class="form-field-control">
                    <button type="submit" class="buttons">Save</button>
                    <button type="button" class="buttons" @onclick="@(async () => ResetForm())">Cancel</button>
                </div>
            </div>
        </div>
    </EditForm>

   
    
}

@code {
    [Parameter]
    public Question? question { get; set; }
    
    [Parameter]
    public EventCallback onResetClick { get; set; }
    [Parameter]
    public EventCallback onSaveClick { get; set; }
    [Parameter]
    public string TopicID { get; set; }
    
    private string solution { get; set; }
    
    
    


    
    
    
    

    protected override async Task OnInitializedAsync()
    {
        solution = question.Solutions[0];
        Debug.Write("Long Answer");
    }
    private async Task HandleValidSubmit()
    {
        question.Solutions[0] = solution;
        question.type = "Long Answer";
        if (await QuestionService.Update(question, Convert.ToInt32(TopicID)))
        {
            await onSaveClick.InvokeAsync();
        }
    }
    
    
    private async void ResetForm()
    {
        await onResetClick.InvokeAsync();
        
    }
}