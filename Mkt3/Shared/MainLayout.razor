@using Microsoft.AspNetCore.Components
@using Radzen.Blazor
@using JustifyContent = Radzen.JustifyContent
@using Orientation = Radzen.Orientation
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Identity 
@using System.Diagnostics
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime

<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

<RadzenLayout>
<RadzenHeader>
    <ChildContent>
        <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0px">
            <RadzenColumn Size="5">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                    <RadzenSidebarToggle Click="@(args => { sidebarExpanded = !sidebarExpanded; bodyExpanded = !bodyExpanded; })">
                    </RadzenSidebarToggle>
                    <RadzenLabel Text="MakeTestE" style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
                    </RadzenLabel>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="7">
                <RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                         <div class="rz-display-none rz-display-sm-inline-flex align-items-center">
  
                             <LoginDisplay/>
                         </div>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </ChildContent>
</RadzenHeader>
<RadzenBody @ref="@body0" @bind-Expanded="@bodyExpanded">
    <ChildContent>
        <RadzenContentContainer Name="main">
            <RadzenRow Gap="2rem" Class="rz-pt-6 rz-px-4 rz-px-sm-8 rz-px-md-12">
                <RadzenColumn Size="12">
                    <RadzenRow Class="rz-mx-auto" Style="max-width: 1440px;">
                        <RadzenColumn Size="12">
                            <CascadingValue Value="@userID">
                            @Body
                            </CascadingValue>


                        </RadzenColumn>
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
        </RadzenContentContainer>
    </ChildContent>
</RadzenBody>
    <RadzenSidebar @ref="@sidebar0" @bind-Expanded="@sidebarExpanded" class="demos-sidebar" style="display: flex; flex-direction: column">
               <CascadingValue Value="@userID" Name="userID">
               <NavMenu/>
               </CascadingValue>
    </RadzenSidebar>
</RadzenLayout>

@if (!rendered)
{
<div class="rz-app-loading">
    <div class="logo-loading"></div>
</div>
}

@code {
    RadzenSidebar sidebar0;
    RadzenBody body0;
    bool sidebarExpanded = true;
    bool bodyExpanded = false;
    bool rendered;
    [Inject]
    UserManager<IdentityUser> userManager { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string? userID { get; set; }

    protected override void OnInitialized()
    {
        Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");

        var user = (authenticationStateTask).Result.User;
        if (user.Identity.IsAuthenticated && userID != "") ;
        {
            userID = userManager.GetUserId(user);
        }


    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            rendered = true;
        }
    }

    void FilterPanelMenu(ChangeEventArgs args)
    {
        var term = args.Value.ToString();
        
    }

    void ChangeTheme(object value)
    {
        var url = UriHelper.GetUriWithQueryParameter("theme", $"{value}");

        UriHelper.NavigateTo(url, true);
    }
}
