@using Mkt3.Data
@using Mkt3.Components
@inject NavigationManager Navigation
@inject QuestionService QuestionService
@inject CurrentNav currentNav


<div class="navHeader">
    <img src="images/new.png" width="24px"/>
    <img src="images/folder.png" width="24px"/>
    <img src="images/upload.png" width="24px"/>
    <span style="padding-left: 95px">
        <img src="images/rename.png" width="24px"/>
        <img src="images/delete.png" width="24px"/>       
    </span>
</div>
<div style="padding-top:5px;">
<TreeView Nodes="Items"
          GetChildNodes="@(item => item.Children)"
          HasChildNodes="@(item => item.Children?.Any() == true)"
          TNode="Item"
          SelectedNode="SelectedNode"
          SelectedNodeChanged="onSelectedNodeChanged">
      
    <NodeContent>@context.Text</NodeContent>
</TreeView>
</div>


@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    public class Item
    {
        public int id { get; set; }
        public string Parent { get; set; }
        public string Text { get; set; }
        public int TopicID { get; set; }
        
        public IEnumerable<Item> Children { get; set; }
      
    }
    List<Item> Items = new();
    IList<Item> ExpandedNodes = new List<Item>();
    Item SelectedNode;

    
    
    protected override async Task OnInitializedAsync()
    {
  
        OnTopicChanged();
        currentNav.onChange += () => UpdateTree();
  
    }
    
    
    
    
    public void onSelectedNodeChanged(Item item)
    {
        if (item != null)
        {
            StateHasChanged();
            Navigation.NavigateTo("/questionList/" + item.TopicID);
        }
    }


    private async void OnTopicChanged()
    {
        var allTopics = await QuestionService.GetTopics();

        foreach (var topic in  allTopics.DistinctBy(e => e.Course))
        {
            var children = allTopics.FindAll(e => e.Course == topic.Course).OrderBy(e=>e.Name).Select(child => new Item() { Parent = topic.Course, Text = child.Name, TopicID = child.ID}).ToList();

            Items.Add(new Item() { Text = topic.Course, Children = children});
        }
        StateHasChanged();
    }

    private async void UpdateTree()
    {
        var allTopics = await QuestionService.GetTopics();
        foreach (var item in Items)
        {
            foreach (var child in item.Children)
            {
                var topic = allTopics.Find(t => t.ID == child.TopicID);
                child.Text = topic.Name;
            }

        }
        StateHasChanged();
    }
    
  

}